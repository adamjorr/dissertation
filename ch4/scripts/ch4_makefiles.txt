
# FILE:./fnrfpr/Makefile 


DATADIR = ../../

VCFIN = $(DATADIR)/chr1.vcf.gz
BAMIN = $(DATADIR)/chr1.bam
BEDIN = $(DATADIR)/chr1_confident.bed.gz
REFIN = $(DATADIR)/chr1.renamed.fa
PROCESSEDBAM = chr1_only_confident.fixmate.sorted.bam

VCFLINES := $(shell bcftools index -n $(VCFIN))
INPUTINCREMENT = 20
INPUTFIRST = 0
INPUTLAST = 100

SHELL=bash
FPRS := $(shell seq $(INPUTFIRST) $(INPUTINCREMENT) $(INPUTLAST))
#FNR_FPR
ADD_FPRS = $(addsuffix _$(FPR),$(FPRS))
ERRATES := $(foreach FPR,$(FPRS),$(ADD_FPRS))
ERBENCHMARKS := $(addsuffix .benchmark,$(ERRATES))
ERPLOTS := $(addsuffix .recal.after.pdf,$(ERRATES))
ERCSVS := $(addsuffix .recal.after.csv,$(ERRATES))

#functions to get FNR and FPR of a given file named FNR_FPR.*
getfnr = $(word 1, $(subst _, ,$(1)))
getfpr = $(word 2, $(subst ., ,$(subst _, ,$(1))))

#actual negative and actual positive files
ANBED = ansites.bed.gz
APBED = apsites.bed.gz
ANLINES = $(shell zcat $(ANBED) | wc -l)
APLINES = $(shell zcat $(APBED) | wc -l)

.PHONY: plots csvs all

plots: $(ERPLOTS)

csvs: $(ERCSVS)

all: plots csvs

.DEFAULT: all

.PRECIOUS:

.SECONDARY:

#index helpers
%.bed.gz.tbi: %.bed.gz
	tabix -p bed $<

%.vcf.gz.tbi: %.vcf.gz
	bcftools index -t $<

%.bam.bai: %.bam
	samtools index $<

#process raw BAM
chr1_only_confident.namesorted.bam: $(BAMIN) $(BEDIN)
	samtools view -h $< -F 3844 -L $(word 2, $^) | samtools sort -@8 -n -o $@ -O bam -

chr1_only_confident.fixmate.bam: chr1_only_confident.namesorted.bam
	samtools fixmate -r --threads 8 $< $@

chr1_only_confident.fixmate.onlypaired.bam: chr1_only_confident.fixmate.bam
	samtools view -h -b -o $@ -f 1 $<

$(PROCESSEDBAM): chr1_only_confident.fixmate.onlypaired.bam
	samtools sort -@ 8 -O bam -o $@ $<

#--- BED files containing the appropraite FNR_FPR ---
#false negative rate = FN / AP
$(APBED): $(VCFIN) $(BEDIN)
	bcftools query -R $(word 2, $^) -f '%CHROM\t%POS0\t%END\n' $< | \
	sort -k1,1 -k2,2n | bedtools merge -i - | \
	bedtools intersect -sorted -a - -b $(word 2, $^) | \
	bedtools makewindows -b - -w 1 | \
	sort -k1,1 -k2,2n | bgzip >$@

%.fn.bed.gz: $(APBED)
	zcat $< | \
	shuf -n $(shell echo $$(($(APLINES) * (100 - $(call getfnr,$*))/100))) | \
	sort -k1,1 -k2,2n | bgzip > $@

#false positive rate =  FP / AN
$(ANBED): $(BEDIN) $(APBED)
	bedtools subtract -a $< -b $(word 2, $^) | \
	bedtools makewindows -b - -w 1 | \
	sort -k1,1 -k2,2n | bgzip > $@

%.fp.bed.gz: $(ANBED)
	zcat $< | shuf -n $(shell echo $$(($(ANLINES) * $(call getfpr,$*) / 100))) | \
	sort -k1,1 -k2,2n | bgzip > $@

#combine the false positives with the appropriate number
#of false negatives
%.toskip.bed.gz: %.fp.bed.gz %.fn.bed.gz
	zcat $(word 2, $^) | cat <(zcat $<) - | \
	sort -k1,1 -k2,2n | bedtools merge -i - | bgzip >$@

# --- Do calibration ---
%.recal.txt: $(PROCESSEDBAM) $(REFIN) $(BEDIN) %.toskip.bed.gz $(PROCESSEDBAM).bai %.toskip.bed.gz.tbi
	gatk BaseRecalibrator -I $< -R $(word 2, $^) -L $(word 3, $^) --known-sites $(word 4, $^) --use-original-qualities -O $@

%.recal.bam: $(PROCESSEDBAM) $(REFIN) %.recal.txt
	gatk ApplyBQSR -I $< -R $(word 2, $^) --bqsr-recal-file $(word 3, $^) --use-original-qualities -O $@

cbbq.recal.bam: $(PROCESSEDBAM)
	~/bin/cbbq/build/cbbq -t6 -k32 -g 214206308 -a .15 --use-oq $< > $@ 2> cbbqlog.txt


# --- Benchmark with GATK ---
# Use actual positives for this test.
%.recal.after.txt: %.recal.bam $(REFIN) $(BEDIN) $(APBED) $(APBED).tbi
	gatk BaseRecalibrator -I $< -R $(word 2, $^) -L $(word 3, $^) --known-sites $(word 4, $^) -O $@

%.recal.after.pdf: %.recal.txt %.recal.after.txt
	gatk AnalyzeCovariates -before $< -after $(word 2, $^) -plots $@

raw.recal.after.pdf: raw.recal.after.txt
	gatk AnalyzeCovariates -bqsr $< -plots $@

%.recal.after.csv: %.recal.txt %.recal.after.txt
	gatk AnalyzeCovariates -before $< -after $(word 2, $^) -csv $@

raw.recal.after.csv: raw.recal.after.txt
	gatk AnalyzeCovariates -bqsr $< -csv $@

allplots.pdf: $(ERPLOTS)
	gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=$@ $^

# FILE:./sims/Makefile 


SHELL=bash
EGRANDISURL1 = https://sra-download.ncbi.nlm.nih.gov/traces/wgs03/wgs_aux/AU/SX/AUSX01/AUSX01.1.fsa_nt.gz
EGRANDISURL2 = https://sra-download.ncbi.nlm.nih.gov/traces/wgs03/wgs_aux/AU/SX/AUSX01/AUSX01.2.fsa_nt.gz
EGRANDISPT1 = $(notdir $(EGRANDISURL1))
EGRANDISPT2 = $(notdir $(EGRANDISURL2))
SAMPLEDREFSIZE = 5000000
ARTDIR = ./art_bin_MountRainier/

.PRECIOUS:

.SECONDARY:

#index helpers
%.fa.gz.fai: %.fa.gz
	samtools faidx $<

%.bam.bai: %.bam
	samtools index $<

%.vcf.gz: %.vcf
	bgzip -c $< > $@

%.vcf.gz.tbi: %.vcf.gz
	bcftools index -t $<

%.dict: %.fa
	gatk CreateSequenceDictionary -R $<

%.dict: %.fa.gz
	gatk CreateSequenceDictionary -R $<

#download AUSX00000000.1, the e. grandis 1.0 contigs.
#this would represent an assembly where scaffolds haven't been joined into contigs
$(EGRANDISPT1):
	wget $(EGRANDISURL1) -O $@

$(EGRANDISPT2):
	wget $(EGRANDISURL2) -O $@

full_grandis_contigs.fa.gz: $(EGRANDISPT1) $(EGRANDISPT2)
	cat <(zcat $<) <(zcat $(word 2, $^)) | bgzip -c > $@

#subsample contigs so we have a reasonable amount of data
#GATK recommends at least 100M bp per read group
#to have 100M bp with 150bp reads, we need 100000000/150 = 666,667 reads
#at 20X coverage, which is high but reasonable for a non-model organism, this requires
# 20 = sequencedbp / gsize; gsize = sequencedbp/20
#So we need a genome size of 5M with 20x to read 100M bases.
sampled_contigs.txt: full_grandis_contigs.fa.gz.fai
	cat $< | shuf | awk '{if (x < $(SAMPLEDREFSIZE)) {x += $$2; print $$1} else exit}' > $@

sampled_contigs.fa.gz: sampled_contigs.txt full_grandis_contigs.fa.gz
	cat $< | xargs samtools faidx $(word 2, $^) | bgzip -c > $@

#theta 0.025
#5,000,000 bp * 0.025 = 125,000
#titv ratio of 2 is an appropriate estimate for eucs
simug.simseq.genome.fa simug.refseq2simseq.SNP.vcf &: sampled_contigs.fa.gz
	simuG.pl -seed 20201112 -titv_ratio 2.0 -snp_count $$(( $(SAMPLEDREFSIZE) * 25 / 1000 )) -refseq $< -prefix simug

#concatenate both references to generate a file with both
#haplotypes in it
#adds a .s suffix to the sampled contigs so they can be differentiated
combined_ref.fa: sampled_contigs.fa.gz simug.simseq.genome.fa
	zcat $< | sed '/^>/s/$$/.s/' | cat - $(word 2, $^) > $@

#simulate reads from the reference with ART
art1.fq art2.fq art.sam &: combined_ref.fa
	$(ARTDIR)/art_illumina -sam -na -ss HS25 -p -l 101 -m 300 -s 20 -rs 20201112 -i $< -f 20 -o art

#align with ngm
ngm.bam: sampled_contigs.fa.gz art1.fq art2.fq
	ngm -r $< -1 $(word 2, $^) -2 $(word 3, $^) -t 4 --rg-id sim --rg-sm sim --rg-lb sim --rg-pl ILLUMINA --rg-pu sim | samtools sort -m 2G -O bam -o $@ -

#recalibrate with true variants
%.recal.txt: %.bam sampled_contigs.fa.gz simug.refseq2simseq.SNP.vcf.gz %.bam.bai sampled_contigs.dict simug.refseq2simseq.SNP.vcf.gz.tbi
	gatk BaseRecalibrator -I $< -R $(word 2, $^) --known-sites $(word 3, $^) -O $@

#recalibrate with true variants
%.recal.bam: %.bam sampled_contigs.fa.gz %.recal.txt
	gatk ApplyBQSR -I $< -R $(word 2, $^) --bqsr-recal-file $(word 3, $^) -O $@

#benchmark recalibration with true variants
%.recal.after.txt: %.recal.bam sampled_contigs.fa.gz simug.refseq2simseq.SNP.vcf.gz %.recal.bam.bai sampled_contigs.dict simug.refseq2simseq.SNP.vcf.gz.tbi
	gatk BaseRecalibrator -I $< -R $(word 2, $^) --known-sites $(word 3, $^) -O $@

%.recal.after.csv: %.recal.txt %.recal.after.txt
	gatk AnalyzeCovariates -before $< -after $(word 2, $^) -csv $@

%.recal.after.pdf: %.recal.txt %.recal.after.txt
	gatk AnalyzeCovariates -before $< -after $(word 2, $^) -plots $@

kbbq-ngm.recal.bam: ngm.bam
	~/bin/cbbq/build/cbbq -t6 -k32 -g $(SAMPLEDREFSIZE) $< > $@ 2> cbbqlog.txt

kbbq-ngm.recal.after.csv: kbbq-ngm.recal.after.txt
	gatk AnalyzeCovariates -after $< -csv $@

#get initial calls with HC and use them to recalibrate
initial-calls.vcf.gz initial-calls.vcf.gz.tbi &: ngm.bam sampled_contigs.fa.gz ngm.bam.bai sampled_contigs.dict
	gatk HaplotypeCaller -R $(word 2, $^) -I $< -stand-call-conf 50 --native-pair-hmm-threads 8 -O $@ --heterozygosity 0.025

initial-calls.recal.txt: ngm.bam sampled_contigs.fa.gz initial-calls.vcf.gz ngm.bam.bai sampled_contigs.dict initial-calls.vcf.gz.tbi
	gatk BaseRecalibrator -I $< -R $(word 2, $^) --known-sites $(word 3, $^) -O $@

initial-calls.recal.bam: ngm.bam sampled_contigs.fa.gz initial-calls.recal.txt
	gatk ApplyBQSR -I $< -R $(word 2, $^) --bqsr-recal-file $(word 3, $^) -O $@

# FILE:./chimpaln/Makefile 


DATADIR = ../../

VCFIN = $(DATADIR)/chr1.vcf.gz
BAMIN = ../2020-09-13/chr1_only_confident.fixmate.sorted.bam
BEDIN = $(DATADIR)/chr1_confident.bed.gz
REFIN = $(DATADIR)/chr1.renamed.fa

#this bam has the quality scores reverted since
#NGM can't handle OQ tags
PROCESSEDBAM = ../2020-09-13/variants/raw.bam
CHIMPBAM = chimpaln.bam
CHIMPSKIP = chimpaln.vcf.gz
CHIMPREF = GCF_002880755.1_Clint_PTRv2_genomic.fa

SHELL=bash

.PHONY: all

all: chimpaln.recal.after.pdf chimpaln.recal.after.csv chimpaln_30.recal.after.pdf chimpaln_30.recal.after.csv

.DEFAULT: all

.PRECIOUS:

.SECONDARY:

#index helpers
%.bed.gz.tbi: %.bed.gz
	tabix -p bed $<

%.vcf.gz.tbi: %.vcf.gz
	bcftools index -t $<

%.bam.bai: %.bam
	samtools index $<

%.fa.fai: %.fa
	samtools faidx $<

%.dict: %.fa
	picard CreateSequenceDictionary R=$< O=$@

# --- Realign reads to chimp ref and get skips ---
collated_reads.bam: $(PROCESSEDBAM)
	samtools collate -f -u -@4 -o $@ $<

rglines.txt: collated_reads.bam
	samtools view -H collated_reads.bam | grep ^@RG > $@

rgargs.txt: rglines.txt
	cat $< | sed 's/^@RG\t// ; y/\t/ / ; s/\([[:upper:]]\{2\}\):/--rg-\L\1=/g' > $@

rgids.txt: rglines.txt
	cat $< | sed 's/^@RG\t// ; s/ID:\([^[:space:]]*\)\t.*/\1/g' > $@

$(CHIMPBAM): $(CHIMPREF) rgids.txt rgargs.txt collated_reads.bam
	samtools split -f "%!.%." -@8 $(word 4, $^) && \
	parallel --link 'ngm --no-progress -r $< -p -q {1}.bam {2} | samtools sort -m 2G -O bam -o {1}.chimpaln.bam - ' :::: $(word 2, $^) :::: $(word 3, $^) && \
	cat $(word 2, $^) | sed 's/$$/.chimpaln.bam/' | xargs samtools merge -@8 -c -p $@

$(CHIMPSKIP): $(CHIMPBAM) $(CHIMPREF) $(CHIMPBAM).bai $(patsubst %.fa,%.dict,$(CHIMPREF)) $(CHIMPREF).fai
	gatk HaplotypeCaller -R $(word 2, $^) -I $< -stand-call-conf 50 --native-pair-hmm-threads 8 -O $@

#use -stand-call-conf 30 instead of 50 or 40 (default)
chimpaln_30.vcf.gz: $(CHIMPBAM) $(CHIMPREF) $(CHIMPBAM).bai $(patsubst %.fa,%.dict,$(CHIMPREF)) $(CHIMPREF).fai
	gatk HaplotypeCaller -R $(word 2, $^) -I $< -stand-call-conf 30 --native-pair-hmm-threads 8 -O $@

# --- Do calibration ---
chimpaln.recal.txt: $(CHIMPBAM) $(CHIMPREF) $(CHIMPSKIP) $(CHIMPBAM).bai
	gatk BaseRecalibrator -I $< -R $(word 2, $^) --known-sites $(word 3, $^) -O $@

chimpaln_30.recal.txt: $(CHIMPBAM) $(CHIMPREF) chimpaln_30.vcf.gz $(CHIMPBAM).bai
	gatk BaseRecalibrator -I $< -R $(word 2, $^) --known-sites $(word 3, $^) -O $@

# Recalibrate the alignment to human using
# the model from the Chimp alignment
%.recal.bam: $(BAMIN) $(REFIN) %.recal.txt
	gatk ApplyBQSR -I $< -R $(word 2, $^) --bqsr-recal-file $(word 3, $^) --use-original-qualities -O $@

# --- Benchmark with GATK ---
# Use actual positives for this test.
%.recal.after.txt: %.recal.bam $(REFIN) $(BEDIN) $(VCFIN) $(VCFIN).tbi
	gatk BaseRecalibrator -I $< -R $(word 2, $^) -L $(word 3, $^) --known-sites $(word 4, $^) -O $@

%.recal.after.pdf: %.recal.txt %.recal.after.txt
	gatk AnalyzeCovariates -before $< -after $(word 2, $^) -plots $@

%.recal.after.csv: %.recal.txt %.recal.after.txt
	gatk AnalyzeCovariates -before $< -after $(word 2, $^) -csv $@
